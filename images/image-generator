#!/usr/bin/env python3

import glob
import json
import logging
import os
import pathlib
import psutil
import requests
import shutil
import subprocess
import sys
import time
import urllib.request
import urlparse

S3_BUCKET_NAME = 'gs://snapd-spread-tests/images'
S3_PUBLIC_URL = 'https://storage.googleapis.com/snapd-spread-tests/images'
SUPPORTED_PLATFORMS = ['dragonboard','pc-amd64','pc-i386','pi4','pi3','pi2']
SUPPORTED_CHANNELS = ['edge', 'beta', 'candidate', 'stable']
SUPPORTED_VERSIONS = [16, 18, 20]

IMAGE_EXT = '.img'
COMPRESSION_EXT = '.img.xz'
SEED_MANIFEST_FILE = 'seed.manifest'
IMAGE_SETS_FILE = 'image_sets.json'
IMAGE_DB_FILE = 'image_db.json'
IMAGES_TAG = 'images'
METADATA_TAG = 'metadata'


"""
This represents an architecture used for images and snaps
"""
class Architecture:

    PLATFORM_ARCH_MAP = {
        'pi2': 'armhf',
        'pi3': 'armhf',
        'pi4': 'arm64',
        'dragonboard': 'arm64',
        'pc-i386': 'i386',
        'pc-amd64': 'amd64'
    }

    @staticmethod
    def from_platform(platform):
        arch = Architecture.PLATFORM_ARCH_MAP.get(platform)
        if not arch:
            raise ValueError('Architecture not supported: {}'.format(arch))
        return arch


"""
This represents a snap with a name and channel from which provides
"""
class Snap:
 
    def __init__(self, definition, default_channel=None):

        self.name = definition.get('name')
        self.channel = definition.get('channel', default_channel)

        if not self.name:
            raise ValueError('snap name not defined: {}'.format(definition))

    def __repr__(self):
        return str(self.__dict__())

    def __dict__(self):
        return {'name': self.name, 'channel': self.channel}

    def __eq__(self, other):
        return self.name == other.name and self.channel == other.channel

    def __hash__(self):
        return hash((self.name, self.channel))

    @staticmethod
    def check_name_and_revision(name, revision):
        valid = True
        try:
            val = int(revision)
        except ValueError:
            valid = False
            logging.error('Revision value is not integer: {}'.format(revision))

        if not revision:
            valid = False
            logging.error('Revision not valid: {}'.format(revision))

        if not name:
            valid = False
            logging.error('Name not valid: {}'.format(name))

        return valid

    def find_revision(self, arch):
        logging.info('Requesting revision for snap: {}, channel: {} and arch: {}'.format(self.name, self.channel, arch))
        response = requests.get('https://search.apps.ubuntu.com/api/v1/snaps/details/{}?channel={}'.format(self.name, self.channel), 
            headers={'X-Ubuntu-Series': '16', 'X-Ubuntu-Architecture': '{}'.format(arch)}, timeout=30)

        if not response.ok:
            logging.error('Failed to get snap revision with status code: {}, raeson: {}'.format(response.status_code, response.reason))
            logging.error('Response details: {}'.format(response.text))
            raise RuntimeError('Error requesting the snap revision: {}'.format(response.text))

        revision = response.json().get('revision')
        logging.info('Revision requested for snap: {}, channel: {} and arch: {} is: {}'.format(self.name, self.channel, arch, revision))
        if Snap.check_name_and_revision(self.name, revision):
            return int(revision)

        raise RuntimeError('Invalid revision: {} for snap: {}'.format(revision, self.name))


"""
This a snap with a revision
"""
class SnapVersion(Snap):
    def __init__(self, definition, default_channel=None):
        Snap.__init__(definition, default_channel)
   
        if not 'revision' in definition.keys():
            raise ValueError('snap revision not defined: {}'.format(definition))
        else:
            self.revision = definition['revision']

    def __repr__(self):        
        return str(self.__dict__())

    def __dict__(self):
        return {
            'name': self.name, 
            'channel': self.channel, 
            'revision': self.revision}

    def __eq__(self, other):
        return self.name == other.name and self.channel == other.channel and self.revision == other.revision

    def __hash__(self):
        return hash((self.name, self.channel, self.revision))


"""
This represents a trigger with is used to create a new image if needed
"""
class Trigger:
 
    def __init__(self, definition):
        self.snap = Snap(definition.get('snap'))

    def __repr__(self):
        return str(self.__dict__())

    def __dict__(self):
        return {'snap': self.snap.__dict__()}

    def __eq__(self, other):
        return self.snap.equals(other.snap)

"""
This represents a set of images with similar caracteristics but intended for 
different platforms. 
"""
class ImageSet:
    def __init__(self, definition):
        self.images = []

        platforms = definition.get('platforms')
        if not platforms:
            raise RuntimeError('Platforms not defined for image set')

        for platform in platforms:
            self.images.append(Image(definition, platform))

    def __repr__(self):
        return str(self.images)

    def __eq__(self, other):
        return set(self.images) == set(other.images)

    def get_images(self):
        return self.images


"""
Generates a list of images base of the image sets defined
This file contains the information needed to generate the images and publish them
"""
class ImageSetManager:

    def __init__(self, images_sets):
        self.images_sets = []
        for image_set_definition in images_sets:
            self.images_sets.append(ImageSet(image_set_definition))

    def get_all_images(self):
        all_images = []
        for images_set in self.images_sets:
            all_images.extend(images_set.get_images())

        return all_images


"""
This class represents a manifest which contains the snaps and revisions for an image
"""
class ImageManifest:
    def __init__(self, manifest_path=None, manifest_url=None, definition=None):
        self.manifest = {}

        if manifest_path:
            self._load_from_path(manifest_path)
            return

        if manifest_url:
            self._load_from_url(manifest_url)
            return

        if definition:
           self._load_from_definition(definition)
           return

    def __repr__(self):
        return str(self.__dict__())

    def __dict__(self):
        return self.manifest

    def __eq__(self, other):
        shared_items = [
            key for key in self.get_snap_names() if
            key in other.get_snap_names() and 
            self.manifest.get(key) == other.get(key)]

        return len(self.get_snap_names()) == len(shared_items) and len(self.get_snap_names()) == len(other.get_snap_names())

    def _load_from_definition(self, definition):
        self.manifest = definition

    def _load_manifest_part(self, line):
        parts = line.split(' ')
        if not len(parts) == 2:
            logging.warning('Manifest incorrect line: {}'.format(parts))
        else:
            snap = parts[0].strip()
            revision = parts[1].strip()
            if Snap.check_name_and_revision(snap, revision):
                self.manifest.update({snap: revision})
            else:
                logging.warning('Manifest incorrect snap: {} and revision: {}'.format(snap, revision))

    def _load_from_url(self, manifest_url):        
        try:
            file = urllib.request.urlopen(manifest_url)
        except HTTPError as err:
            if err.code == 404:
                logging.warning('The manifest url does not exist')
                raise RuntimeError('The manifest url does not exist')
            else:
                raise 

        for line in file:
            self._load_manifest_part(line.decode('utf-8'))

    def _load_from_path(self, manifest_path):
        if not os.path.exists(manifest_path):
            raise ValueError('No manifest in path: {}'.format(manifest_path))

        with open(manifest_path, 'r') as file:
            for line in file.readlines():
                self._load_manifest_part(line.decode('utf-8'))
                

    def get_snap_revision(self, snap):
        revision = self.manifest.get(snap.name)
        try:
            return int(revision)
        except ValueError:
            logging.error('Revision value is not integer: {}'.format(revision))
            return

    def get_snap_names(self):
        return self.manifest.keys()

    def empty(self):
        return len(self.get_snap_names()) == 0


"""
This class represents an image with all its attributes and the including the triggers
which are used to update
"""
class Image:
    IMAGE_FILE = 'image.json'

    def __init__(self, definition, default_platform=None):
        self.version = definition.get('version')
        self.channel = definition.get('channel')
        self.manifest = ImageManifest(definition=definition.get('manifest'))
        self.platform = definition.get('platform', default_platform)

        if not self.channel in SUPPORTED_CHANNELS:
            raise ValueError('channel: {} not supported. Supported channels: {}'.format(self.channel, SUPPORTED_CHANNELS))

        if not self.version in SUPPORTED_VERSIONS:
            raise ValueError('version: {} not supported. Supported versions: {}'.format(self.channel, SUPPORTED_VERSIONS))

        if not self.platform:
            raise ValueError('platform list empty')
    
        if not self.platform in SUPPORTED_PLATFORMS:
            raise ValueError('platform: {} not supported. Supported platform: {}'.format(self.platform, SUPPORTED_PLATFORMS))

        self.triggers = []
        for trigger in definition.get('triggers'):
            self.triggers.append(Trigger(trigger))

        self.snaps = []
        for snap in definition.get('snaps'):
            self.snaps.append(Snap(snap))

        self.output_dir = self._get_output_dir()
        self.remote_manifest = None

    def __repr__(self):        
        return str(self.__dict__())

    def __dict__(self):        
        snaps_dict = []
        for snap in self.snaps:
            snaps_dict.append(snap.__dict__())            

        triggers_dict = []
        for trigger in self.triggers:
            triggers_dict.append(trigger.__dict__())  

        manifest_dict = self.manifest.__dict__()

        return {
            'version': self.version, 
            'channel': self.channel, 
            'manifest': manifest_dict, 
            'snaps': snaps_dict, 
            'triggers': triggers_dict,
            'platform': self.platform}

    def __eq__(self, other):
        return self.version == other.version and \
            self.channel == other.channel and \
            self.manifest == other.manifest and \
            self.platform == other.platform and \
            set(self.snaps) == set(other.snaps)

    def get_image_name(self):
        name = '{}-{}-{}'.format(self.platform, self.version, self.channel)
        for snap in self.snaps:
            name = '{}-{}_{}'.format(name, snap.name, snap.channel)
        return name

    def _get_output_dir(self):
        output_dir = os.path.join('output', self.get_image_name())        

        logging.info('Output dir used: {}'.format(output_dir))
        return output_dir        

    def _find_in_output_dir(self):
        images = glob.glob('{}/*{}'.format(self.output_dir, IMAGE_EXT))
        images.extend(glob.glob('{}/*{}'.format(self.output_dir, COMPRESSION_EXT)))
        if len(images) == 1:
            return images[0]

    "This method is similar to __eq__ but it doesn't match the manifest"

    def match(self, other):
        return self.version == other.version and \
            self.channel == other.channel and \
            self.platform == other.platform and \
            ( self.manifest == other.manifest or self.manifest.empty or other.manifest.empty ) and \
            set(self.snaps) == set(other.snaps)

    def is_image_dir_created(self):
        return os.path.isdir(self.output_dir)        

    def get_image_already_created(self):
        if os.path.isdir(self.output_dir):
            return self._find_in_output_dir()

    def get_remote_revision(self, snap):
        if not self.remote_manifest
            try:
                manifest_url = urlparse.urljoin(S3_PUBLIC_URL, self.get_image_name(), 'seed.manifest')
                self.remote_manifest = ImageManifest(manifest_url=manifest_url)                
            except:
                return None

        return self.remote_manifest.get_snap_revision(snap)

    def read_manifest(self):
        manifest_dict = {}
        manifest_path = os.path.join(self.output_dir, SEED_MANIFEST_FILE)
        
        if not os.path.exists(manifest_path):
            raise RuntimeError('Manifest file does not exist: {}'.format(manifest_path))

        self.manifest = ImageManifest(manifest_path=manifest_path)

    def save_image(self):
        image_file = os.path.join(self.output_dir, self.IMAGE_FILE)

        if os.path.exists(image_file):
            return

        logging.info('Saving to image info: {}'.format(image_file))
        with open(image_file, 'w+') as json_file:
            json.dump(self.__dict__(), json_file)


"""
This class Creates, compress and synchronize the ubuntu core images
"""
class ImageProcessor:
    def __init__(self, image):
        self.image = image

    def _get_snap_list(self):
        snap_list = []
        for snap in self.image.snaps:
            snap_param = '{}={}'.format(snap.name, snap.channel)
            snap_list.append(snap_param)

        return sorted(snap_list)

    def get_image_options(self):
        if self.image.version >= 20:
            return '--image-size 8G'
        if self.image.platform.startswith('pc'):
            return '--image-size 3G'
        return ''

    def get_snap_options(self):
        snaps_option = ''
        for snap in self._get_snap_list():
            snaps_option = '{} --snap {}'.format(snaps_option, snap)
        return snaps_option

    def create_image(self):
        # Clean the output dir
        if os.path.isdir(self.image.output_dir):
            shutil.rmtree(self.image.output_dir)
            os.mkdir(self.image.output_dir)

        # Create the image using ubuntu-image tool
        image_option = self.get_image_options()
        snaps_option = self.get_snap_options()
        
        line = "/snap/bin/ubuntu-image {} {} -c {} -O {} ./models/{}-{}.model".format(
            image_option, snaps_option, 
            self.image.channel, self.image.output_dir, 
            self.image.platform, self.image.version)

        logging.info('Running command line: {}'.format(line))
        subprocess.call(line, shell=True)

        self.image.read_manifest()
        self.image.save_image()

    def delete_image(self):
        # Clean the output dir
        if not os.path.isdir(self.image.output_dir):
            raise RuntimeError('Output dir does not exist')

        image_path = self.image.get_image_already_created()
        logging.info('Removing image: {}'.format(image_path))
        os.remove(image_path)

    def sync_image(self):
        dirname = os.path.basename(self.image.output_dir)
        line = 'gsutil -o GSUtil:parallel_composite_upload_threshold=2000M rsync -d -r {} {}/{}'.format(self.image.output_dir, S3_BUCKET_NAME, dirname)
        logging.info('Running command line: {}'.format(line))
        subprocess.call(line, shell=True)

    def compress_image(self):
        image_path = self.image.get_image_already_created()

        if image_path.endswith(COMPRESSION_EXT):
            logging.warning('Image {} already compressed'.format(image_path))
            return

        line = 'xz {}'.format(image_path)
        logging.info('Running command line: {}'.format(line))
        subprocess.call(line, shell=True)

        if os.path.exists(image_path):
            raise RuntimeError('Image file still exists after compress it')

        if not os.path.exists('{}.xz'.format(image_path)):
            raise RuntimeError('Image file with compression has not been created')

    def process_image(self):
        self.create_image()
        self.compress_image()
        self.sync_image()
        self.delete_image()

        return self.image

    def process_metadata(self):
        self.create_image()
        self.delete_image()
        self.sync_image()

        return self.image


"""
This class creates a list of images
"""
class ImagesManager:
    def __init__(self, images_db_data):
        self.images_db_data = []
        for image in images_db_data:
            self.images_db_data.append(Image(image))

    def _get_image_from_db(self, image):
        for image_db in self.images_db_data:
            if image_db.match(image):
                return image_db

    def is_new_image_needed(self, image):
        logging.info('Checking if new image is needed')

        manifest = image.manifest
        if not manifest or manifest.empty():
            logging.info('Manifest empty, new image is needed')
            return True

        for trigger in image.triggers:
            trigger_snap = trigger.snap

            try:
                snap_revision_store = trigger_snap.find_revision(Architecture.from_platform(image.platform))
                logging.info('Revision for snap: {}, obtained from Store: {}'.format(trigger_snap, snap_revision_store))
            except Exception:
                logging.error('Failed to get snap revision from store for snap {}'.format(trigger_snap))
                return True

            snap_revision_remote = None
            try:
                snap_revision_remote = image.get_remote_revision(trigger_snap)
            except Exception:
                logging.warning('Snap revision could not be found in remote manifest')
            
            # The revision uploaded to the bucket is the primary one, in case it cannot be retrieved, the local one is used
            if snap_revision_remote:
                snap_revision = snap_revision_remote
                logging.info('Revision for snap: {}, obtained from remote manifest: {}'.format(trigger_snap, snap_revision))
            else
                snap_revision = manifest.get_snap_revision(trigger_snap)
                logging.info('Revision for snap: {}, obtained from local manifest: {}'.format(trigger_snap, snap_revision))

            if not snap_revision or snap_revision_store > snap_revision:
                logging.info('Revision for snap {} on store is higher {} than in manifest {}'.format(
                    trigger_snap, snap_revision_store, snap_revision))
                return True

        logging.info('New image is not needed')
        return False

    def _create(self, images, is_metadata=False):
        created_images = []
        for image in images:
            logging.info('Starting with image: {}'.format(image))

            image_db = self._get_image_from_db(image)
            if image_db and image_db.is_image_dir_created() and not self.is_new_image_needed(image_db):
                logging.info('No image needed for image: {}'.format(image_db))
                image_db.save_image()
                created_images.append(image_db)
                continue

            processor = ImageProcessor(image)
            try:
                if is_metadata:
                    image_new = processor.process_metadata()
                else:
                    image_new = processor.process_image()
            except Exception:
                logging.error('Image {} could not be processed correctly'.format(image))
                continue

            if image_new:
                logging.info('Image {} processed successfully'.format(image_new))
                created_images.append(image_new)
            else:
                logging.error('Image {} could not be processed correctly'.format(image))

        return created_images

    def create_images(self, images):
        return self._create(images, is_metadata=False)

    def create_metadata(self, images):
        return self._create(images, is_metadata=True)


class ImageFiles:
    
    @staticmethod
    def write_db(images, metadata):
        images_dict = []
        for image in images:
            images_dict.append(image.__dict__())

        metadata_dict = []
        for image in metadata:
            metadata_dict.append(image.__dict__())

        full_dict = {
            IMAGES_TAG: images_dict,
            METADATA_TAG: metadata_dict
        }
        if not images:
            logging.warning('No images to update in db')
        if not metadata:
            logging.warning('No metadata to update in db')

        logging.info('Saving to images and metadata to db: {}'.format(full_dict))    
        with open(IMAGE_DB_FILE, 'w') as json_file:
            json.dump(full_dict, json_file)

    @staticmethod
    def read_images_db():
        images_db = ImageFiles._read_db(IMAGES_TAG)
        if not images_db:
            return []
        return images_db

    @staticmethod
    def read_metadata_db():
        metadata_db = ImageFiles._read_db(METADATA_TAG)
        if not metadata_db:
            return []
        return metadata_db

    @staticmethod
    def read_images_set():
        return ImageFiles._read_sets(IMAGES_TAG)

    @staticmethod
    def read_metadata_set():
        return ImageFiles._read_sets(METADATA_TAG)

    @staticmethod
    def _read_sets(tag):
        if not os.path.exists(IMAGE_SETS_FILE):
            raise RuntimeError('Sets file not found: {}'.format(IMAGE_SETS_FILE))

        with open(IMAGE_SETS_FILE) as json_file:  
            data = json.load(json_file)
            
            if not tag in data.keys():
                raise RuntimeError('Tag {} not found on file: {}'.format(tag, IMAGE_SETS_FILE))

            return data.get(tag)

    @staticmethod
    def _read_db(tag):
        if not os.path.exists(IMAGE_DB_FILE):
            return

        with open(IMAGE_DB_FILE) as json_file:  
            data = json.load(json_file)
            if not tag in data.keys():
                raise RuntimeError('Tag {} not found on file: {}'.format(tag, IMAGE_DB_FILE))

            return data.get(tag)


class ProcessManager:

    @staticmethod
    def is_image_generator_already_running():
        count = 0
        for proc in psutil.process_iter():
            try:
                pinfo = proc.as_dict(attrs=['pid', 'name', 'cmdline'])
                if 'python3' == pinfo.get('name'):
                    for line in pinfo.get('cmdline'):
                        if line.endswith('/image-generator'):
                            count = count + 1
            except psutil.NoSuchProcess:
                return False

        return count > 1


def main():
    images_sets_manager = ImageSetManager(ImageFiles.read_images_set())
    images_manager = ImagesManager(ImageFiles.read_images_db())

    metadata_sets_manager = ImageSetManager(ImageFiles.read_metadata_set())
    metadata_manager = ImagesManager(ImageFiles.read_metadata_db())

    # Create the images and update their metadata
    all_images = images_sets_manager.get_all_images()
    used_images = images_manager.create_images(all_images)

    # Update just the metadata for images which don't require image file
    all_metadata = metadata_sets_manager.get_all_images()
    used_metadata = metadata_manager.create_metadata(all_metadata)

    # Save all the metadata to db
    ImageFiles.write_db(used_images, used_metadata)    


if __name__ == "__main__":
    logging.basicConfig(format='%(levelname)s - %(message)s', level=logging.INFO)

    if ProcessManager.is_image_generator_already_running():
        logging.warning('Image generator already being executed, skipping...')
        sys.exit()
    
    main()
